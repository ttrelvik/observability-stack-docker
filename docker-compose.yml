services:
  grafana:
    image: grafana/grafana-oss:latest
    user: "1000:1000"
    env_file: .env.observability

    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana-config/provisioning:/etc/grafana/provisioning
    networks:
      - traefik-net       # So Traefik can see it
      - observability-net # For internal communication
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # --- Traefik Labels ---
        - "traefik.enable=true"
        - "traefik.swarm.network=traefik-net"
        - "traefik.http.routers.grafana.rule=Host(`grafana.trelvik.net`)"
        - "traefik.http.routers.grafana.entrypoints=https"
        - "traefik.http.routers.grafana.tls.certresolver=myresolver"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./loki-config:/etc/loki
      - loki-data:/loki
    networks:
      - observability-net
    deploy:
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus:latest
    command: --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus-config:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - observability-net
      - traefik-net
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=traefik-net"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.trelvik.net`)"
        - "traefik.http.routers.prometheus.entrypoints=https"
        - "traefik.http.routers.prometheus.service=prometheus"
        - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        # Secure the Prometheus UI with the same SSO middleware as the Traefik dashboard
        - "traefik.http.routers.prometheus.middlewares=sso-auth@swarm"

  node-exporter:
    image: prom/node-exporter:v1.9.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - observability-net
    deploy:
      mode: global

  promtail:
    image: grafana/promtail:3.5
    # Expose Promtail's UDP port to receive syslog messages
    ports:
      - target: 1514
        published: 1514
        protocol: udp
        mode: host
    volumes:
      - ./promtail-config/config.yml:/etc/promtail/config.yml
      - traefik-logs:/var/log/traefik:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - observability-net
    deploy:
      placement:
        constraints:
          - node.role == manager

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    command:
      - --enable_metrics=cpu,memory,network,disk,diskIO
      - --store_container_labels=true
    networks:
      - observability-net
    deploy:
      mode: global

networks:
  traefik-net:
    external: true
  observability-net:
    driver: overlay

volumes:
  grafana-data:
    external: true
    name: observability-stack-docker_grafana-data
  loki-data:
    external: true
    name: observability-stack-docker_loki-data
  prometheus-data:
    external: true
    name: observability-stack-docker_prometheus-data
  traefik-logs:
    external: true